#---------------------------------------------------------------------------------------------------
# MariaDB (MySQL)
#---------------------------------------------------------------------------------------------------
# The IP of the node where the MariaDB (MySQL) or Postgress server process is running. Current version uses same names for both DB servers
MariaDBIp={{ MariaDBIp }}
# Port in which the server accepts the connections.
MariaDBPort={{ MariaDBPort }}
# MariaDB user that the services will use. Needs INSERT/SELECT privileges. Used by EARDBD
MariaDBUser={{ MariaDBUser }}
# Password for the previous user. If left blank or commented it will assume the user has no password.
MariaDBPassw={{ MariaDBPassw }}
# MariaDB user that the commands (eacct, ereport) will use. Only uses SELECT privileges.
MariaDBCommandsUser={{ MariaDBCommandsUser }}
# Password for the previous user. If left blank or commented it will assume the user has no password.
MariaDBCommandsPassw={{ MariaDBCommandsPassw }}
# Name of EAR's database in the server.
MariaDBDatabase={{ MariaDBDatabase }}
# Maximum number of connections of the commands user to prevent server saturation/malicious actuation. Applies to MariaDBCommandsUser
MaxConnections={{ MaxConnections }}
# The following specify the granularity of data reported to database.
# Extended node information reported to database (added: temperature and avg_freq in power monitoring).
ReportNodeDetail={{ ReportNodeDetail }}
# Extended signature hardware counters reported to database.
ReportSigDetail={{ ReportSigDetail }}
# Set to 1 if you want Loop signatures to be reported to database.
ReportLoops={{ ReportLoops }}
#---------------------------------------------------------------------------------------------------
# EAR Daemon (EARD)
#---------------------------------------------------------------------------------------------------
# The port where the EARD will be listening.
NodeDaemonPort={{ NodeDaemonPort }}
# Frequency used by power monitoring service, in seconds.
NodeDaemonPowermonFreq={{ NodeDaemonPowermonFreq }}
# Maximum supported frequency (1 means nominal, no turbo).
NodeDaemonMaxPstate={{ NodeDaemonMaxPstate }}
# Enable (1) or disable (0) the turbo frequency.
NodeDaemonTurbo={{ NodeDaemonTurbo }}
# Enables the use of the database.
NodeUseDB={{ NodeUseDB }}
# Inserts data to MySQL by sending that data to the EARDBD (1) or directly (0).
NodeUseEARDBD={{ NodeUseEARDBD }}
# '1' means EAR is controlling frequencies at all times (targeted to production systems) and 0 means EAR will not change the frequencies when users are not using EAR library (targeted to benchmarking systems).
NodeForceFrequencies={{ NodeForceFrequencies }}
# The verbosity level [0..4]
NodeDaemonVerbose={{ NodeDaemonVerbose }}
# When set to 1, the output is saved in '$EAR_TMP'/eard.log (common configuration) as a log file.Otherwsie, stderr is used.
NodeUseLog={{ NodeUseLog }}
# Minimum time(microsecond) between two energy readings for performance accuracy
MinTimePerformanceAccuracy={{ MinTimePerformanceAccuracy }}
#---------------------------------------------------------------------------------------------------
# EAR Database Manager (EARDBD)
#---------------------------------------------------------------------------------------------------
# Port where the EARDBD server is listening
DBDaemonPortTCP={{ DBDaemonPortTCP }}
# Port where the EARDBD mirror is listening
DBDaemonPortSecTCP={{ DBDaemonPortSecTCP }}
# Port is used to synchronize the server and mirror
DBDaemonSyncPort={{ DBDaemonSyncPort }}
# In seconds, interval of time of accumulating data to generate an energy aggregation
DBDaemonAggregationTime={{ DBDaemonAggregationTime }}
# In seconds, time between inserts of the buffered data
DBDaemonInsertionTime={{ DBDaemonInsertionTime }}
# Memory allocated per process. This allocations is used for buffering the data sent to the database by EARD or other components. If there is a server and mirror in a node a double of that value will be allocated. It is expressed in MegaBytes.
DBDaemonMemorySize={{ DBDaemonMemorySize }}
# The percentage of the memory buffer used by the previous field, by each type. These types are: mpi, non-mpi and learning applications, loops, energy metrics and aggregations and events, in that order. If a type gets 0% of space, this metric is discarded and not saved into the database.
DBDaemonMemorySizePerType={{ DBDaemonMemorySizePerType }}
# When set to 1, eardbd uses a '$EAR_TMP'/eardbd.log file as a log file
DBDaemonUseLog={{ DBDaemonUseLog }}
#---------------------------------------------------------------------------------------------------
# EAR Library (EARL)
#---------------------------------------------------------------------------------------------------
# Path where coefficients are installed, usually $EAR_ETC/ear/coeffs
CoefficientsDir={{ CoefficientsDir }}
# Number of levels used by DynAIS algorithm.
DynAISLevels={{ DynAISLevels }}
# Windows size used by DynAIS, the higher the size the higher the overhead.
DynAISWindowSize={{ DynAISWindowSize }}
# Maximum time in seconds that EAR will wait until a signature is computed. After this value, if no signature is computed, EAR will go to periodic mode.
DynaisTimeout={{ DynaisTimeout }}
# Time in seconds to compute every application signature when the EAR goes to periodic mode.
LibraryPeriod={{ LibraryPeriod }}
# Number of MPI calls whether EAR must go to periodic mode or not.
CheckEARModeEvery={{ CheckEARModeEvery }}
#---------------------------------------------------------------------------------------------------
# EAR Global Manager (EARGMD)
#---------------------------------------------------------------------------------------------------
# The IP or hostname of the node where the EARGMD demon is running.
GlobalManagerHost={{ GlobalManagerHost }}
# Port where EARGMD will be listening.
GlobalManagerPort={{ GlobalManagerPort }}
# Use '1' or not '0' aggregated metrics to compute total energy.
GlobalManagerUseAggregated={{ GlobalManagerUseAggregated }}
# Period T1 and period T2 are specified in seconds. T1 must be less than T2. Global manager updates the information every T1 seconds and uses the energy/power in T2 period to estimate energy/power constraints
GlobalManagerPeriodT1={{ GlobalManagerPeriodT1 }}
GlobalManagerPeriodT2={{ GlobalManagerPeriodT2 }}
# Units field, Can be '-' (Joules), 'K' KiloJoules or 'M' MegaJoules
GlobalManagerUnits={{ GlobalManagerUnits }}
# This limit means the maximum energy allowed in 259200 seconds in 550000 KJoules
GlobalManagerEnergyLimit={{ GlobalManagerEnergyLimit }}
#
GlobalManagerPolicy={{ GlobalManagerPolicy }}
# Global manager modes. Two modes are supported '0' (manual) or '1' (automatic). Manual means Gobal Manager is only monitoring energy&power and reporting to the DB . Automatic means it takes actions to guarantee energy limits.
GlobalManagerMode={{ GlobalManagerMode }}
# A mail can be sent reporting the warning level (and the action taken in automatic mode). 'nomail' means no mail is sent. This option is independent of the node.
GlobalManagerMail={{ GlobalManagerMail }}
# Percentage of accumulated energy to start the warning DEFCON level L4, L3 and L2.
GlobalManagerWarningsPerc={{ GlobalManagerWarningsPerc }}
# Number of "grace" T1 periods before doing a new re-evaluation. After a warning, EARGM will wait T1xGlobalManagerGracePeriods seconds until it raises a new warning.
GlobalManagerGracePeriods={{ GlobalManagerGracePeriods }}
# Verbose level
GlobalManagerVerbose={{ GlobalManagerVerbose }}
# When set to 1, the output is saved in '$EAR_TMP'/eargmd.log (common configuration) as a log file.
GlobalManagerUseLog={{ GlobalManagerUseLog }}
#---------------------------------------------------------------------------------------------------
# Common Configuration
#---------------------------------------------------------------------------------------------------
# Network extension (using another network instead of the local one). If compute nodes must be accessed from login nodes with a different network different than default, and can be accesed using a expension, uncommmet next line and define 'netext' accordingly.
# NetworkExtension=netext
# Default verbose level
Verbose={{ Verbose }}
# Path used for communication files, shared memory, etc. It must be PRIVATE per compute node and with read/write permissions. $EAR_TMP
TmpDir={{ TmpDir }}
# Path where coefficients and configuration are stored. It must be readable in all compute nodes. $EAR_ETC
EtcDir={{ EtcDir }}
InstDir={{ InstDir }}
# Path where metrics are generated in text files when no database is installed. A suffix is included.
DataBasePathName={{ DataBasePathName }}
#---------------------------------------------------------------------------------------------------
# Power Policies
# ---------------------------------------------------------------------------------------------------
# policy names must be exactly file names for policies installed in the system
DefaultPowerPolicy={{ DefaultPowerPolicy }}
# Example of the definition of 3 policies with different configurations: It must be included policy name, default frequency, privileged means whether normal users can execute or nor. Settings depends on policy.
{% for policy in policys %}Policy={{ policy["Policy"] }} Settings={{ policy["Settings"] }} DefaultFreq={{ policy["DefaultFreq"] }} Privileged={{ policy["Privileged"] }}
{% endfor %}
#---------------------------------------------------------------------------------------------------
# Other Plugins
#---------------------------------------------------------------------------------------------------
# Energy reading plugin (without the extension). Allows to use different system components to read the energy of the node. In this case, this plugin reads the energy of the system using Intel Node Manager.
# look at /path/to/inst/lib/plugins/energy folder to see the list of installed energy plugins
PluginEnergy={{ PluginEnergy }}
# Power model plugin (without the extension). The power model plugin is used to predict the power and energy consumption of the next iteration of the executing application.
PluginPowerModel={{ PluginPowerModel }}
#---------------------------------------------------------------------------------------------------
# Security
#---------------------------------------------------------------------------------------------------
# Authorized users,accounts and groups are allowed to change policies, thresholds, frequencies etc,
# they are supposed to be admins
AuthorizedUsers={{ AuthorizedUsers }}
AuthorizedAccounts={{ AuthorizedAccounts }}
AuthorizedGroups={{ AuthorizedGroups }}
# Privileged users,accounts and groups are allowed to use EnergyTags. The "allowed" TAGs are defined
# by row together with the priviledged user/group/account.
# General energy tag
{% for tag in general_energy_tags %}EnergyTag={{ tag["EnergyTag"] }} pstate={{ tag["pstate"] }}
{% endfor %}
# Energy tag with limited users
{% for tag in limited_energy_tags %}EnergyTag={{ tag["EnergyTag"] }} pstate={{ tag["pstate"] }} users={{ tag["users"] }} groups={{ tag["groups"] }} accounts={{ tag["accounts"] }}
{% endfor %}
#---------------------------------------------------------------------------------------------------
# Special Nodes
#---------------------------------------------------------------------------------------------------
# Describes nodes with some special characteristic such as different default P_STATEs, default coefficients file and/or policy thresholds
{% for node in special_nodes %}NodeName={{ node["NodeName"] }} CPUs={{ node["CPUs"] }} DefaultPstates={{ node["DefaultPstates"] }}  DefCoefficientsFile={{ node["DefCoefficientsFile"] }}
{% endfor %}
#---------------------------------------------------------------------------------------------------
# Node Isles
#---------------------------------------------------------------------------------------------------
# It is mandatory to specify all the nodes in the cluster, grouped by islands. More than one line
# per island must be supported to hold nodes with different names or for pointing to different
# EARDBDs through its IPs or hostnames.
# In the following example the nodes are clustered in two different islands, but the Island 1 have
# two types of EARDBDs configurations. min_power and max_power are used to identify potential
# invalid power computations. They must reflect valid values error_power reflects invalid values not
# reported to the DB node temperature > max_temp and node power> max_power generates warning
# messages in syslog.
{% for island in islands %}Island={{ island["Island"] }} Nodes={{ island["Nodes"] }} DBIP={{ island["DBIP"] }} DBSECIP={{ island["DBSECIP"] }} min_power={{ island["min_power"] }} max_power={{ island["max_power"] }} error_power={{ island["error_power"] }} max_temp={{ island["max_temp"] }}
{% endfor %}
